const graph = {
  "A": [["B",3], ["C", 6]],
  "B": [["E",11], ["D",4], ["C",4]],
  "C": [["D",8],["G", 11]],
  E: [["H", 9]],
  D: [["E",10], ["F",5], ["G",2]],
  F: [["H",1]],
  G: [["H",2]],
  H: []
}

// Time -> O(Vlog(V) * E)
function findShortestPath(s,e,graph){
  let minCostPath = {}
  let path = {}
  for(let node in graph){
    path[node] = null
    minCostPath[node] = Infinity
  }
  minCostPath[s] = 0
  setMinCostPathToNodes(s,e,graph,minCostPath,path)
  let result = createPath(path,s,e)
  console.log(result.join("->"))
  return minCostPath[e]
}


createPath(array,s,e){
  let result = []
  let node = e
  while(array[node]){
    result.unshift(node)
    node = array[node]
  }
  result.unshift(node)
  return result
}



function setMinCostPathToNodes(s,e,graph,minCostPath,path){
  let visited = {}
  let PQ = new Priority()
  PQ.add(s,0)
  while(PQ.length() > 0){
    let nodeArr = PQ.shift()
    let node = nodeArr[0]
    let weight = nodeArr[1]
    if(visited[node]) continue
    visited[node] = true
    if(minCostPath[node] < weight) continue
    if(node === e) return
    for(let toNodeArr of graph[node]){
      let toNode = toNodeArr[0]
      let totalWeight = toNodeArr[1] + weight
      if(totalWeight < minCostPath[toNode]){
        minCostPath[toNode] = totalWeight
        PQ.add(toNode,totalWeight)
        path[toNode] = node
      }
    }
  
  }
}


class Priority {
  constructor(){
    this.array = []
  }
  
  length(){
    return this.array.length
  }
  
  add(node,weight){
    this.array.push([node,weight])
    this.sortArr()
  }
  
  sortArr(){
    this.array.sort((a,b) => a[1] - b[1])
  }
  
  shift(){
    let nodeArr = this.array.shift()
    this.sortArr()
    return nodeArr
  }
}













main(s,e,graph)
  let minCostPath = {}
  let path = {}
  for(let node in graph){
    minCostPath[node] = Infinity
    path[node] = null
  }
  
  minCostPath[s] = 0
  
  setMinCostToAllPath(s,e,graph,minCostPath, path)
  return minCostPath[e]
  
  
  function setMinCostToAllPath(s,e,graph,minCostPath,path){
    let visited = {}
    let PQ = new PriorityQueue()
    PQ.add(s,0)
    while(PQ.length() > 0){
      let nodeArr = PQ.shift()
      let node = nodeArr[0]
      let weight = nodeARr[1]
      if(minCostPath[node] < weight) continue
      if(visited[node]) continue
      visited[node] = true
      if(node === e) continue
      for(let toNodeArr of graph[node]){
        let toNode = toNodeArr[0]
        let totalWeight = toNodeArr[1] + weight
        if(totalWeight < minCostPath[toNode]){
          minCostPath[toNode] = totalWeight
          path[toNode] = node
          
          if(PQ.contains(toNode)){
            PQ.updateNode(toNode,totalWeight)
          }else {
            PQ.add(toNode,totalWeight)
          }
        }
      
      }
      
    }
  
  }
  
  
  class PriorityQueue {
    constructor(){
      this.array = []
    }
    
    length(){
      return this.array.length
    }
    
    add(node,weight){}
    
    shift(){}
    contains(node){}
    
  }
  
  
  
