const graph = {
  "A": [["B",3], ["C", 6]],
  "B": [["E",11], ["D",4], ["C",4]],
  "C": [["D",8],["G", 11]],
  E: [["H", 9]],
  D: [["E",10], ["F",5], ["G",2]],
  F: [["H",1]],
  G: [["H",2]],
  H: []
}

function findPathStopEarly(s,e,graph){
  let pathToNodes = {}
  let path = {}
  for(let node in graph){
    path[node] = null
    pathToNodes[node]= Infinity
  }
  pathToNodes[s] = 0
  setPathToNodes(s,e,graph,pathToNodes,path)
  let result = createPath(path,s,e)
  return result.join("->")
}

function createPath(path,s,e){
  let result = []
  let node = e
  while(path[node]){
    result.unshift(node)
    node = path[node]
  }
  result.unshift(node)
  return result
}

function setPathToNodes(s,e,graph,pathToNodes,path){
  let visited = {}
  let PQ = new Priority()
  PQ.add(s,0)
  while(PQ.length() > 0){
    let nodeArr = PQ.shift()
    let node = nodeArr[0]
    let weight = nodeArr[1]
    if(node === e) return 
    if(visited[node]) continue
    visited[node] = true
    if(pathToNodes[node] < weight) continue
    for(let toNodeArr of graph[node]){
      let toNode = toNodeArr[0]
      if(visited[toNode]) continue
      let totalWeight = toNodeArr[1] + weight
      if(totalWeight < pathToNodes[toNode]){
        pathToNodes[toNode] = totalWeight
        PQ.add(toNode,totalWeight)
        path[toNode]= node
      }
    }
  }
}


class Priority {
  constructor(){
    this.array = []
  }
  
  length(){
    return this.array.length 
  }
  
  add(node, value){
    this.array.push([node,value])
    this.sortArr()
  }
  
  sortArr(){
    this.array.sort((a,b) => a[1] - b[1])
  }
  
  shift(){
    let removedArr = this.array.shift()
    this.sortArr()
    return removedArr
  }
  
}
